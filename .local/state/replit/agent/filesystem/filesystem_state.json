{"file_contents":{"products/serializers.py":{"content":"from rest_framework import serializers\nfrom .models import Category, Brand, Product, ProductImage, Variant, Review\n\n\nclass CategorySerializer(serializers.ModelSerializer):\n    children = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Category\n        fields = ['id', 'name', 'slug', 'description', 'image', 'parent', 'children', 'is_active']\n    \n    def get_children(self, obj):\n        if obj.children.exists():\n            return CategorySerializer(obj.children.filter(is_active=True), many=True).data\n        return []\n\n\nclass BrandSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Brand\n        fields = ['id', 'name', 'slug', 'description', 'logo', 'is_active']\n\n\nclass ProductImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ProductImage\n        fields = ['id', 'image', 'alt_text', 'is_primary', 'order']\n\n\nclass VariantSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Variant\n        fields = ['id', 'name', 'value', 'price_adjustment', 'stock', 'sku', 'is_active']\n\n\nclass ReviewSerializer(serializers.ModelSerializer):\n    user_name = serializers.CharField(source='user.username', read_only=True)\n    \n    class Meta:\n        model = Review\n        fields = ['id', 'user', 'user_name', 'rating', 'title', 'comment', 'is_approved', 'is_verified_purchase', 'created_at']\n        read_only_fields = ['user', 'is_approved', 'is_verified_purchase', 'created_at']\n\n\nclass ProductListSerializer(serializers.ModelSerializer):\n    category_name = serializers.CharField(source='category.name', read_only=True)\n    brand_name = serializers.CharField(source='brand.name', read_only=True)\n    primary_image = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Product\n        fields = ['id', 'name', 'slug', 'short_description', 'category_name', 'brand_name', \n                  'price', 'compare_price', 'stock', 'is_featured', 'is_new', 'is_bestseller',\n                  'average_rating', 'review_count', 'primary_image', 'discount_percentage']\n    \n    def get_primary_image(self, obj):\n        image = obj.images.filter(is_primary=True).first() or obj.images.first()\n        if image:\n            request = self.context.get('request')\n            if request:\n                return request.build_absolute_uri(image.image.url)\n        return None\n\n\nclass ProductDetailSerializer(serializers.ModelSerializer):\n    category = CategorySerializer(read_only=True)\n    brand = BrandSerializer(read_only=True)\n    images = ProductImageSerializer(many=True, read_only=True)\n    variants = VariantSerializer(many=True, read_only=True)\n    reviews = ReviewSerializer(many=True, read_only=True)\n    \n    class Meta:\n        model = Product\n        fields = ['id', 'name', 'slug', 'description', 'short_description', 'category', 'brand',\n                  'price', 'compare_price', 'stock', 'sku', 'weight', 'is_active', 'is_featured',\n                  'is_new', 'is_bestseller', 'ingredients', 'average_rating', 'review_count',\n                  'images', 'variants', 'reviews', 'discount_percentage', 'is_in_stock', 'is_low_stock',\n                  'created_at']\n","size_bytes":3181},"cart/api_views.py":{"content":"from rest_framework import viewsets, status\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticatedOrReadOnly\nfrom .models import Cart, CartItem\nfrom products.models import Product, Variant\nfrom .serializers import CartSerializer, CartItemSerializer\n\n\nclass CartViewSet(viewsets.ModelViewSet):\n    serializer_class = CartSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    \n    def get_queryset(self):\n        if self.request.user.is_authenticated:\n            return Cart.objects.filter(user=self.request.user)\n        return Cart.objects.none()\n    \n    def get_or_create_cart(self):\n        if self.request.user.is_authenticated:\n            cart, created = Cart.objects.get_or_create(user=self.request.user)\n        else:\n            session_key = self.request.session.session_key\n            if not session_key:\n                self.request.session.create()\n                session_key = self.request.session.session_key\n            cart, created = Cart.objects.get_or_create(session_key=session_key)\n        return cart\n    \n    @action(detail=False, methods=['get'])\n    def current(self, request):\n        cart = self.get_or_create_cart()\n        serializer = self.get_serializer(cart)\n        return Response(serializer.data)\n    \n    @action(detail=False, methods=['post'])\n    def add_item(self, request):\n        cart = self.get_or_create_cart()\n        product_id = request.data.get('product_id')\n        variant_id = request.data.get('variant_id')\n        quantity = int(request.data.get('quantity', 1))\n        \n        try:\n            product = Product.objects.get(id=product_id, is_active=True)\n        except Product.DoesNotExist:\n            return Response({'error': 'Product not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        variant = None\n        if variant_id:\n            try:\n                variant = Variant.objects.get(id=variant_id, product=product, is_active=True)\n            except Variant.DoesNotExist:\n                return Response({'error': 'Variant not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        cart_item, created = CartItem.objects.get_or_create(\n            cart=cart,\n            product=product,\n            variant=variant,\n            defaults={'quantity': quantity}\n        )\n        \n        if not created:\n            cart_item.quantity += quantity\n            cart_item.save()\n        \n        serializer = CartSerializer(cart)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    \n    @action(detail=False, methods=['post'])\n    def update_item(self, request):\n        cart = self.get_or_create_cart()\n        item_id = request.data.get('item_id')\n        quantity = int(request.data.get('quantity', 1))\n        \n        try:\n            cart_item = CartItem.objects.get(id=item_id, cart=cart)\n            if quantity <= 0:\n                cart_item.delete()\n            else:\n                cart_item.quantity = quantity\n                cart_item.save()\n        except CartItem.DoesNotExist:\n            return Response({'error': 'Cart item not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        serializer = CartSerializer(cart)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    \n    @action(detail=False, methods=['post'])\n    def remove_item(self, request):\n        cart = self.get_or_create_cart()\n        item_id = request.data.get('item_id')\n        \n        try:\n            cart_item = CartItem.objects.get(id=item_id, cart=cart)\n            cart_item.delete()\n        except CartItem.DoesNotExist:\n            return Response({'error': 'Cart item not found'}, status=status.HTTP_404_NOT_FOUND)\n        \n        serializer = CartSerializer(cart)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    \n    @action(detail=False, methods=['post'])\n    def clear(self, request):\n        cart = self.get_or_create_cart()\n        cart.items.all().delete()\n        serializer = CartSerializer(cart)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n","size_bytes":4126},"core/urls.py":{"content":"from django.urls import path\nfrom . import views\n\napp_name = 'core'\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('contact/', views.contact, name='contact'),\n    path('faq/', views.faq, name='faq'),\n    path('terms/', views.terms, name='terms'),\n    path('privacy/', views.privacy, name='privacy'),\n]\n","size_bytes":367},"core/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'\n","size_bytes":140},"cart/migrations/0003_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('cart', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='cart',\n            name='user',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.AlterUniqueTogether(\n            name='cartitem',\n            unique_together={('cart', 'product', 'variant')},\n        ),\n    ]\n","size_bytes":765},"products/migrations/0001_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Brand',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=200, unique=True)),\n                ('slug', models.SlugField(max_length=200, unique=True)),\n                ('description', models.TextField(blank=True)),\n                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/')),\n                ('is_active', models.BooleanField(default=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n            options={\n                'ordering': ['name'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=200, unique=True)),\n                ('slug', models.SlugField(max_length=200, unique=True)),\n                ('description', models.TextField(blank=True)),\n                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),\n                ('is_active', models.BooleanField(default=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n            options={\n                'verbose_name_plural': 'Categories',\n                'ordering': ['name'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=300)),\n                ('slug', models.SlugField(max_length=300, unique=True)),\n                ('description', models.TextField()),\n                ('short_description', models.CharField(blank=True, max_length=500)),\n                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('compare_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),\n                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),\n                ('stock', models.PositiveIntegerField(default=0)),\n                ('low_stock_threshold', models.PositiveIntegerField(default=5)),\n                ('sku', models.CharField(blank=True, max_length=100, unique=True)),\n                ('barcode', models.CharField(blank=True, max_length=100)),\n                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),\n                ('is_active', models.BooleanField(default=True)),\n                ('is_featured', models.BooleanField(default=False)),\n                ('is_new', models.BooleanField(default=False)),\n                ('is_bestseller', models.BooleanField(default=False)),\n                ('ingredients', models.TextField(blank=True)),\n                ('seo_title', models.CharField(blank=True, max_length=200)),\n                ('seo_description', models.CharField(blank=True, max_length=300)),\n                ('seo_keywords', models.CharField(blank=True, max_length=300)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='ProductImage',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('image', models.ImageField(upload_to='products/')),\n                ('alt_text', models.CharField(blank=True, max_length=200)),\n                ('is_primary', models.BooleanField(default=False)),\n                ('order', models.PositiveIntegerField(default=0)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n            options={\n                'ordering': ['order', '-is_primary'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Variant',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(help_text='e.g., Size, Color, Strength', max_length=100)),\n                ('value', models.CharField(help_text='e.g., Medium, Red, 20mg', max_length=100)),\n                ('price_adjustment', models.DecimalField(decimal_places=2, default=0, max_digits=10)),\n                ('stock', models.PositiveIntegerField(default=0)),\n                ('sku', models.CharField(blank=True, max_length=100, unique=True)),\n                ('is_active', models.BooleanField(default=True)),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product')),\n            ],\n            options={\n                'ordering': ['name', 'value'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Review',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),\n                ('title', models.CharField(max_length=200)),\n                ('comment', models.TextField()),\n                ('is_approved', models.BooleanField(default=False)),\n                ('is_verified_purchase', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n    ]\n","size_bytes":6653},"orders/migrations/0002_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('products', '0001_initial'),\n        ('orders', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='orderitem',\n            name='product',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.product'),\n        ),\n        migrations.AddField(\n            model_name='orderitem',\n            name='variant',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.variant'),\n        ),\n        migrations.AddField(\n            model_name='order',\n            name='coupon',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.coupon'),\n        ),\n    ]\n","size_bytes":991},"ecommerce/wsgi.py":{"content":"\"\"\"\nWSGI config for ecommerce project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n\napplication = get_wsgi_application()\n","size_bytes":395},"cart/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"README.md":{"content":"# E-Commerce Platform\n\nA modern, feature-rich Django e-commerce platform with a beautiful UI inspired by Puffland.nz. Built with Django 4.2, PostgreSQL, Django REST Framework, and TailwindCSS.\n\n## ✨ Features\n\n### 🛍️ Shopping Experience\n- **Modern Hero Banner** with call-to-action buttons and promotional images\n- **Product Catalog** with grid layout, category filtering, brand filtering, and price range filters\n- **Live Search** with instant results\n- **Product Details** with image gallery, variant selector, reviews, and related products\n- **Shopping Cart** with AJAX updates, quantity controls, and coupon application\n- **Checkout Flow** with address form, order summary, and payment placeholder (Stripe-ready)\n\n### 👤 User Management\n- **Authentication System** with registration, login, and password reset\n- **User Profile Dashboard** with order history and wishlist functionality\n- **Age Verification Modal** (18+ check)\n- **Wishlist** feature for saving favorite products\n\n### 🎨 Modern UI/UX\n- **Dark/Light Mode Toggle** with persistent user preference\n- **Glassmorphism Effects** and subtle gradients\n- **Neumorphic Product Cards** with smooth hover animations\n- **Gradient Accent Colors** (teal to purple)\n- **Sticky Navigation Header** with floating cart icon\n- **Fully Responsive** mobile-first design\n- **Inter & Poppins** typography\n\n### 🔧 Technical Features\n- **Django REST Framework APIs** for product listing, filtering, cart operations, user auth, and order management\n- **PostgreSQL Database** for persistent data storage\n- **SEO Optimization** with meta tags, Open Graph tags, sitemap.xml, and robots.txt\n- **Django Admin Panel** with full CRUD for products, categories, orders, blog posts, coupons, and users\n- **Product Review System** with rating and moderation\n- **Coupon Management System** with discount calculation\n- **Blog Section** with article list, detail pages, and author info\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Python 3.11\n- PostgreSQL database (automatically configured in Replit)\n\n### Installation\n\n1. **Install Dependencies**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. **Run Migrations**\n   ```bash\n   python manage.py migrate\n   ```\n\n3. **Create Sample Data** (includes admin user)\n   ```bash\n   python manage.py populate_data\n   ```\n\n4. **Run Development Server**\n   ```bash\n   python manage.py runserver 0.0.0.0:5000\n   ```\n\n5. **Access the Application**\n   - Homepage: `http://0.0.0.0:5000/`\n   - Admin Panel: `http://0.0.0.0:5000/admin/`\n   - API Docs: `http://0.0.0.0:5000/api/`\n\n### Default Admin Credentials\n- **Username:** admin\n- **Password:** admin123\n\n## 📁 Project Structure\n\n```\necommerce/\n├── products/          # Product catalog, categories, brands, reviews\n├── cart/              # Shopping cart functionality\n├── orders/            # Order management and coupons\n├── users/             # User authentication and profiles\n├── blog/              # Blog and articles\n├── core/              # Homepage and static pages\n├── templates/         # Django templates\n├── static/            # Static files (CSS, JS, images)\n├── media/             # User-uploaded files\n└── ecommerce/         # Project settings\n```\n\n## 🔌 API Endpoints\n\n### Products\n- `GET /api/products/` - List all products (with filtering, search, pagination)\n- `GET /api/products/{slug}/` - Product details\n- `GET /api/products/featured/` - Featured products\n- `GET /api/products/new_arrivals/` - New products\n- `GET /api/products/bestsellers/` - Bestselling products\n- `GET /api/categories/` - List all categories\n- `GET /api/brands/` - List all brands\n\n### Cart\n- `GET /api/cart/current/` - Get current user's cart\n- `POST /api/cart/add_item/` - Add item to cart\n- `POST /api/cart/update_item/` - Update cart item quantity\n- `POST /api/cart/remove_item/` - Remove item from cart\n- `POST /api/cart/clear/` - Clear cart\n\n### Orders\n- `GET /api/orders/` - List user's orders\n- `POST /api/orders/` - Create new order\n- `POST /api/coupons/validate/` - Validate coupon code\n\n### Reviews\n- `GET /api/reviews/?product={slug}` - Get product reviews\n- `POST /api/reviews/` - Create review (authenticated)\n\n## 🎨 Tech Stack\n\n### Backend\n- **Django 4.2** - Web framework\n- **Django REST Framework** - API development\n- **PostgreSQL** - Database\n- **Pillow** - Image processing\n- **WhiteNoise** - Static file serving\n\n### Frontend\n- **TailwindCSS 3.x** - Utility-first CSS framework\n- **Alpine.js** - Lightweight JavaScript framework\n- **Google Fonts** - Inter & Poppins typography\n\n## 🛠️ Development\n\n### Create Superuser\n```bash\npython manage.py createsuperuser\n```\n\n### Run Tests\n```bash\npython manage.py test\n```\n\n### Collect Static Files\n```bash\npython manage.py collectstatic\n```\n\n## 📦 Database Models\n\n### Products App\n- **Category** - Product categories with hierarchical structure\n- **Brand** - Product brands\n- **Product** - Main product model with pricing, stock, and flags\n- **ProductImage** - Multiple images per product\n- **Variant** - Product variants (size, color, strength, etc.)\n- **Review** - Customer reviews and ratings\n\n### Cart App\n- **Cart** - User shopping cart\n- **CartItem** - Items in cart with quantity\n\n### Orders App\n- **Order** - Customer orders with shipping/billing info\n- **OrderItem** - Products in order\n- **Coupon** - Discount coupons with validation\n\n### Users App\n- **User** - Custom user model with age verification\n- **UserProfile** - Extended user information\n- **Wishlist** - User's saved products\n\n### Blog App\n- **BlogPost** - Blog articles\n- **Comment** - Comments on blog posts\n\n## 🔐 Environment Variables\n\nThe following environment variables are automatically configured in Replit:\n- `DATABASE_URL` - PostgreSQL connection string\n- `SECRET_KEY` - Django secret key\n- `DEBUG` - Debug mode (default: True)\n\n## 🚢 Deployment\n\nThis project is configured for easy deployment on platforms like Replit, Render, or Google Cloud.\n\n### Production Checklist\n- [ ] Set `DEBUG=False`\n- [ ] Configure `SECRET_KEY` in environment variables\n- [ ] Set up PostgreSQL database\n- [ ] Configure `ALLOWED_HOSTS`\n- [ ] Set up static file storage\n- [ ] Configure email backend for notifications\n- [ ] Add Stripe API keys for payment processing\n- [ ] Set up SSL/HTTPS\n- [ ] Configure CORS settings\n\n## 📝 License\n\nThis project is open source and available under the MIT License.\n\n## 🤝 Contributing\n\nContributions, issues, and feature requests are welcome!\n\n## 👨‍💻 Author\n\nBuilt with ❤️ using Django and modern web technologies.\n\n---\n\n**Note:** This is a demonstration project. For production use, make sure to implement proper security measures, payment processing, and error handling.\n","size_bytes":6747},"orders/urls.py":{"content":"from django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .api_views import CouponViewSet, OrderViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'coupons', CouponViewSet, basename='coupon')\nrouter.register(r'orders', OrderViewSet, basename='order')\n\napp_name = 'orders'\n\nurlpatterns = [\n    path('api/', include(router.urls)),\n]\n","size_bytes":365},"blog/admin.py":{"content":"from django.contrib import admin\nfrom .models import BlogPost, Comment\n\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ['title', 'author', 'is_published', 'is_featured', 'published_at', 'views_count', 'created_at']\n    list_filter = ['is_published', 'is_featured', 'published_at', 'created_at']\n    search_fields = ['title', 'content', 'tags']\n    prepopulated_fields = {'slug': ('title',)}\n    fieldsets = (\n        ('Content', {\n            'fields': ('title', 'slug', 'author', 'excerpt', 'content', 'featured_image', 'tags')\n        }),\n        ('Status', {\n            'fields': ('is_published', 'is_featured', 'published_at', 'views_count')\n        }),\n        ('SEO', {\n            'fields': ('seo_title', 'seo_description'),\n            'classes': ('collapse',)\n        }),\n    )\n\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    list_display = ['user', 'blog_post', 'is_approved', 'created_at']\n    list_filter = ['is_approved', 'created_at']\n    search_fields = ['user__username', 'blog_post__title', 'content']\n    actions = ['approve_comments']\n    \n    def approve_comments(self, request, queryset):\n        queryset.update(is_approved=True)\n    approve_comments.short_description = \"Approve selected comments\"\n","size_bytes":1281},"cart/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"ecommerce/__init__.py":{"content":"","size_bytes":0},"orders/migrations/__init__.py":{"content":"","size_bytes":0},"ecommerce/settings.py":{"content":"\"\"\"\nDjango settings for ecommerce project.\n\nGenerated by 'django-admin startproject' using Django 4.2.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\nimport os\nfrom dotenv import load_dotenv\nimport dj_database_url\nfrom datetime import timedelta\n\n# Load environment variables\nload_dotenv()\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-p*p21&c8jmu44zp_ex%!)=um5i=yeoo=vbsdq7ehb9-!_zhgxf')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG', 'True').lower() == 'true'\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n    'django.contrib.sitemaps',\n\n    # Wagtail apps\n    'wagtail.contrib.forms',\n    'wagtail.contrib.redirects',\n    'wagtail.embeds',\n    'wagtail.sites',\n    'wagtail.users',\n    'wagtail.snippets',\n    'wagtail.documents',\n    'wagtail.images',\n    'wagtail.search',\n    'wagtail.admin',\n    'wagtail',\n    'modelcluster',\n    'taggit',\n\n    'rest_framework',\n    'rest_framework_simplejwt',\n    'corsheaders',\n    'django_filters',\n\n    # Local apps\n    'core',\n    'products',\n    'cart',\n    'orders',\n    'users',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'wagtail.contrib.redirects.middleware.RedirectMiddleware',\n]\n\nROOT_URLCONF = 'ecommerce.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'cart.context_processors.cart_context',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'ecommerce.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Custom User Model\nAUTH_USER_MODEL = 'users.User'\n\n# Authentication\nLOGIN_URL = '/users/login/'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\n\n# REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticatedOrReadOnly',\n    ],\n    'DEFAULT_FILTER_BACKENDS': [\n        'django_filters.rest_framework.DjangoFilterBackend',\n        'rest_framework.filters.SearchFilter',\n        'rest_framework.filters.OrderingFilter',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 12,\n}\n\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n}\n\n# CORS Settings\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n\n# Email Configuration (Console backend for development)\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nEMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nDEFAULT_FROM_EMAIL = 'noreply@ecommerce.com'\n\n# Session Settings\nSESSION_COOKIE_AGE = 86400  # 1 day\nSESSION_SAVE_EVERY_REQUEST = False\n\n# Cache Control\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    }\n}\n\n# Security Settings (adjust for production)\nCSRF_TRUSTED_ORIGINS = [\n    'https://*.replit.dev',\n    'https://*.repl.co',\n]\n\n# Age verification\nAGE_VERIFICATION_REQUIRED = True\nAGE_VERIFICATION_MINIMUM = 18\n\n# Site ID (required for Wagtail)\nSITE_ID = 1\n\n# Wagtail settings\nWAGTAIL_SITE_NAME = 'Puffland Ecommerce'\nWAGTAILSEARCH_BACKENDS = {\n    'default': {\n        'BACKEND': 'wagtail.search.backends.database',\n    }\n}\n\nWAGTAILADMIN_BASE_URL = 'http://localhost:8000'\n\n# Media settings for Wagtail\nWAGTAILIMAGES_MAX_UPLOAD_SIZE = 20 * 1024 * 1024  # 20MB\nWAGTAILIMAGES_MAX_IMAGE_PIXELS = 128000000  # 128 megapixels\nWAGTAILDOCS_SERVE_METHOD = 'direct'\n\n# Wagtail forms settings\nWAGTAILFORMS_HELP_TEXT_ALLOW_HTML = True\n\n# Wagtail image processing settings\nWAGTAILIMAGES_RENDITION_KEY_SEPARATOR = '/'\nWAGTAILIMAGES_RENDITION_KEY_FORMAT = 'images/{}/{0}.{1}'\n\n# Wagtail Snippets - using wagtail_hooks.py for registration","size_bytes":6711},"users/models.py":{"content":"from django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\n\nclass User(AbstractUser):\n    email = models.EmailField(unique=True)\n    phone = models.CharField(max_length=20, blank=True)\n    date_of_birth = models.DateField(null=True, blank=True)\n    age_verified = models.BooleanField(default=False)\n    age_verified_at = models.DateTimeField(null=True, blank=True)\n    newsletter_subscribed = models.BooleanField(default=False)\n    \n    def __str__(self):\n        return self.username\n\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    bio = models.TextField(blank=True)\n    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)\n    address_line1 = models.CharField(max_length=255, blank=True)\n    address_line2 = models.CharField(max_length=255, blank=True)\n    city = models.CharField(max_length=100, blank=True)\n    state = models.CharField(max_length=100, blank=True)\n    postal_code = models.CharField(max_length=20, blank=True)\n    country = models.CharField(max_length=100, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"{self.user.username}'s Profile\"\n\n\nclass Wishlist(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='wishlist_items')\n    product = models.ForeignKey('products.Product', on_delete=models.CASCADE)\n    added_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        unique_together = ('user', 'product')\n        ordering = ['-added_at']\n    \n    def __str__(self):\n        return f\"{self.user.username} - {self.product.name}\"\n","size_bytes":1743},"cart/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass CartConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cart'\n","size_bytes":140},"blog/migrations/__init__.py":{"content":"","size_bytes":0},"orders/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass OrdersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'orders'\n","size_bytes":144},"products/api_views.py":{"content":"from rest_framework import viewsets, filters, status\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticatedOrReadOnly, IsAuthenticated, IsAdminUser\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom .models import Category, Brand, Product, Review\nfrom .serializers import (\n    CategorySerializer, BrandSerializer, ProductListSerializer,\n    ProductDetailSerializer, ReviewSerializer\n)\n\n\nclass CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'slug'\n    \n    def get_permissions(self):\n        if self.action in ['list', 'retrieve']:\n            return [IsAuthenticatedOrReadOnly()]\n        return [IsAdminUser()]\n    \n    def get_queryset(self):\n        if self.action in ['list', 'retrieve'] and not self.request.user.is_staff:\n            return self.queryset.filter(is_active=True)\n        return self.queryset\n\n\nclass BrandViewSet(viewsets.ModelViewSet):\n    queryset = Brand.objects.all()\n    serializer_class = BrandSerializer\n    lookup_field = 'slug'\n    \n    def get_permissions(self):\n        if self.action in ['list', 'retrieve']:\n            return [IsAuthenticatedOrReadOnly()]\n        return [IsAdminUser()]\n    \n    def get_queryset(self):\n        if self.action in ['list', 'retrieve'] and not self.request.user.is_staff:\n            return self.queryset.filter(is_active=True)\n        return self.queryset\n\n\nclass ProductViewSet(viewsets.ModelViewSet):\n    queryset = Product.objects.all().prefetch_related('images', 'variants', 'reviews')\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['category__slug', 'brand__slug', 'is_featured', 'is_new', 'is_bestseller']\n    search_fields = ['name', 'description', 'short_description', 'sku']\n    ordering_fields = ['price', 'created_at', 'name']\n    ordering = ['-created_at']\n    lookup_field = 'slug'\n    \n    def get_permissions(self):\n        if self.action in ['list', 'retrieve', 'featured', 'new_arrivals', 'bestsellers', 'related']:\n            return [IsAuthenticatedOrReadOnly()]\n        return [IsAdminUser()]\n    \n    def get_queryset(self):\n        if self.action in ['list', 'retrieve', 'featured', 'new_arrivals', 'bestsellers', 'related'] and not self.request.user.is_staff:\n            return self.queryset.filter(is_active=True)\n        return self.queryset\n    \n    def get_serializer_class(self):\n        if self.action == 'retrieve':\n            return ProductDetailSerializer\n        return ProductListSerializer\n    \n    @action(detail=False, methods=['get'])\n    def featured(self, request):\n        featured_products = self.queryset.filter(is_featured=True)[:8]\n        serializer = self.get_serializer(featured_products, many=True)\n        return Response(serializer.data)\n    \n    @action(detail=False, methods=['get'])\n    def new_arrivals(self, request):\n        new_products = self.queryset.filter(is_new=True)[:8]\n        serializer = self.get_serializer(new_products, many=True)\n        return Response(serializer.data)\n    \n    @action(detail=False, methods=['get'])\n    def bestsellers(self, request):\n        bestsellers = self.queryset.filter(is_bestseller=True)[:8]\n        serializer = self.get_serializer(bestsellers, many=True)\n        return Response(serializer.data)\n    \n    @action(detail=True, methods=['get'])\n    def related(self, request, slug=None):\n        product = self.get_object()\n        related_products = self.queryset.filter(\n            category=product.category\n        ).exclude(id=product.id)[:4]\n        serializer = ProductListSerializer(related_products, many=True, context={'request': request})\n        return Response(serializer.data)\n\n\nclass ReviewViewSet(viewsets.ModelViewSet):\n    queryset = Review.objects.filter(is_approved=True)\n    serializer_class = ReviewSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    \n    def perform_create(self, serializer):\n        serializer.save(user=self.request.user)\n    \n    def get_queryset(self):\n        queryset = super().get_queryset()\n        product_slug = self.request.query_params.get('product', None)\n        if product_slug:\n            queryset = queryset.filter(product__slug=product_slug)\n        return queryset\n","size_bytes":4376},"users/migrations/0001_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.conf import settings\nimport django.contrib.auth.models\nimport django.contrib.auth.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django.utils.timezone\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('products', '0001_initial'),\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),\n                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),\n                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),\n                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),\n                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),\n                ('email', models.EmailField(max_length=254, unique=True)),\n                ('phone', models.CharField(blank=True, max_length=20)),\n                ('date_of_birth', models.DateField(blank=True, null=True)),\n                ('age_verified', models.BooleanField(default=False)),\n                ('age_verified_at', models.DateTimeField(blank=True, null=True)),\n                ('newsletter_subscribed', models.BooleanField(default=False)),\n                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),\n                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),\n            ],\n            options={\n                'verbose_name': 'user',\n                'verbose_name_plural': 'users',\n                'abstract': False,\n            },\n            managers=[\n                ('objects', django.contrib.auth.models.UserManager()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('bio', models.TextField(blank=True)),\n                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),\n                ('address_line1', models.CharField(blank=True, max_length=255)),\n                ('address_line2', models.CharField(blank=True, max_length=255)),\n                ('city', models.CharField(blank=True, max_length=100)),\n                ('state', models.CharField(blank=True, max_length=100)),\n                ('postal_code', models.CharField(blank=True, max_length=20)),\n                ('country', models.CharField(blank=True, max_length=100)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Wishlist',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('added_at', models.DateTimeField(auto_now_add=True)),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['-added_at'],\n                'unique_together': {('user', 'product')},\n            },\n        ),\n    ]\n","size_bytes":5152},"orders/migrations/0003_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('orders', '0002_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='order',\n            name='user',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.AddIndex(\n            model_name='order',\n            index=models.Index(fields=['order_number'], name='orders_orde_order_n_f3ada5_idx'),\n        ),\n        migrations.AddIndex(\n            model_name='order',\n            index=models.Index(fields=['email'], name='orders_orde_email_88c705_idx'),\n        ),\n        migrations.AddIndex(\n            model_name='order',\n            index=models.Index(fields=['-created_at'], name='orders_orde_created_f0ce29_idx'),\n        ),\n    ]\n","size_bytes":1111},"products/management/__init__.py":{"content":"","size_bytes":0},"users/__init__.py":{"content":"","size_bytes":0},"products/management/commands/__init__.py":{"content":"","size_bytes":0},"orders/__init__.py":{"content":"","size_bytes":0},"cart/admin.py":{"content":"from django.contrib import admin\nfrom .models import Cart, CartItem\n\n\nclass CartItemInline(admin.TabularInline):\n    model = CartItem\n    extra = 0\n\n\n@admin.register(Cart)\nclass CartAdmin(admin.ModelAdmin):\n    list_display = ['id', 'user', 'session_key', 'total_items', 'subtotal', 'created_at', 'updated_at']\n    list_filter = ['created_at', 'updated_at']\n    search_fields = ['user__username', 'session_key']\n    inlines = [CartItemInline]\n\n\n@admin.register(CartItem)\nclass CartItemAdmin(admin.ModelAdmin):\n    list_display = ['cart', 'product', 'variant', 'quantity', 'unit_price', 'total_price']\n    search_fields = ['product__name', 'cart__user__username']\n","size_bytes":663},"users/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'\n","size_bytes":142},"products/wagtail_hooks.py":{"content":"\nfrom wagtail.snippets.models import register_snippet\nfrom wagtail.admin.panels import FieldPanel, MultiFieldPanel\nfrom .models import Category, Brand\n","size_bytes":151},"products/migrations/0003_brandsnippet_categorysnippet_and_more.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 11:22\n\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport modelcluster.fields\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        (\"products\", \"0002_initial\"),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"BrandSnippet\",\n            fields=[],\n            options={\n                \"verbose_name\": \"Brand\",\n                \"verbose_name_plural\": \"Brands\",\n                \"proxy\": True,\n                \"indexes\": [],\n                \"constraints\": [],\n            },\n            bases=(\"products.brand\",),\n        ),\n        migrations.CreateModel(\n            name=\"CategorySnippet\",\n            fields=[],\n            options={\n                \"verbose_name\": \"Category\",\n                \"verbose_name_plural\": \"Categories\",\n                \"proxy\": True,\n                \"indexes\": [],\n                \"constraints\": [],\n            },\n            bases=(\"products.category\",),\n        ),\n        migrations.AlterField(\n            model_name=\"product\",\n            name=\"compare_price\",\n            field=models.DecimalField(\n                blank=True,\n                decimal_places=2,\n                help_text=\"Original price for showing discounts\",\n                max_digits=10,\n                null=True,\n                validators=[django.core.validators.MinValueValidator(0)],\n            ),\n        ),\n        migrations.AlterField(\n            model_name=\"productimage\",\n            name=\"product\",\n            field=modelcluster.fields.ParentalKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"images\",\n                to=\"products.product\",\n            ),\n        ),\n        migrations.AlterField(\n            model_name=\"variant\",\n            name=\"price_adjustment\",\n            field=models.DecimalField(\n                decimal_places=2,\n                default=0,\n                help_text=\"Extra price for this variant\",\n                max_digits=10,\n            ),\n        ),\n        migrations.AlterField(\n            model_name=\"variant\",\n            name=\"product\",\n            field=modelcluster.fields.ParentalKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"variants\",\n                to=\"products.product\",\n            ),\n        ),\n    ]\n","size_bytes":2416},"products/urls.py":{"content":"from django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .api_views import CategoryViewSet, BrandViewSet, ProductViewSet, ReviewViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'categories', CategoryViewSet, basename='category')\nrouter.register(r'brands', BrandViewSet, basename='brand')\nrouter.register(r'products', ProductViewSet, basename='product')\nrouter.register(r'reviews', ReviewViewSet, basename='review')\n\napp_name = 'products'\n\nurlpatterns = [\n    path('api/', include(router.urls)),\n]\n","size_bytes":534},"users/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"cart/serializers.py":{"content":"from rest_framework import serializers\nfrom .models import Cart, CartItem\nfrom products.serializers import ProductListSerializer, VariantSerializer\n\n\nclass CartItemSerializer(serializers.ModelSerializer):\n    product = ProductListSerializer(read_only=True)\n    product_id = serializers.IntegerField(write_only=True)\n    variant = VariantSerializer(read_only=True)\n    variant_id = serializers.IntegerField(write_only=True, required=False, allow_null=True)\n    \n    class Meta:\n        model = CartItem\n        fields = ['id', 'product', 'product_id', 'variant', 'variant_id', 'quantity', 'unit_price', 'total_price']\n        read_only_fields = ['unit_price', 'total_price']\n\n\nclass CartSerializer(serializers.ModelSerializer):\n    items = CartItemSerializer(many=True, read_only=True)\n    \n    class Meta:\n        model = Cart\n        fields = ['id', 'items', 'total_items', 'subtotal', 'total', 'created_at', 'updated_at']\n        read_only_fields = ['total_items', 'subtotal', 'total']\n","size_bytes":988},"manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":665},"orders/models.py":{"content":"from django.db import models\nfrom django.conf import settings\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom decimal import Decimal\nimport uuid\n\n\nclass Coupon(models.Model):\n    code = models.CharField(max_length=50, unique=True)\n    description = models.TextField(blank=True)\n    discount_type = models.CharField(max_length=20, choices=[\n        ('percentage', 'Percentage'),\n        ('fixed', 'Fixed Amount'),\n    ])\n    discount_value = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    min_purchase_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)])\n    max_discount_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, validators=[MinValueValidator(0)])\n    usage_limit = models.PositiveIntegerField(null=True, blank=True, help_text=\"Total number of times this coupon can be used\")\n    usage_count = models.PositiveIntegerField(default=0)\n    user_usage_limit = models.PositiveIntegerField(default=1, help_text=\"Number of times a single user can use this coupon\")\n    is_active = models.BooleanField(default=True)\n    valid_from = models.DateTimeField()\n    valid_to = models.DateTimeField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return self.code\n    \n    def calculate_discount(self, subtotal):\n        if self.discount_type == 'percentage':\n            discount = (subtotal * self.discount_value) / 100\n            if self.max_discount_amount:\n                discount = min(discount, self.max_discount_amount)\n        else:\n            discount = self.discount_value\n        return min(discount, subtotal)\n    \n    def is_valid(self, user=None, subtotal=Decimal('0')):\n        from django.utils import timezone\n        now = timezone.now()\n        \n        if not self.is_active:\n            return False, \"This coupon is not active\"\n        \n        if now < self.valid_from:\n            return False, \"This coupon is not yet valid\"\n        \n        if now > self.valid_to:\n            return False, \"This coupon has expired\"\n        \n        if self.usage_limit and self.usage_count >= self.usage_limit:\n            return False, \"This coupon has reached its usage limit\"\n        \n        if subtotal < self.min_purchase_amount:\n            return False, f\"Minimum purchase amount of {self.min_purchase_amount} required\"\n        \n        if user:\n            user_usage = Order.objects.filter(user=user, coupon=self).count()\n            if user_usage >= self.user_usage_limit:\n                return False, \"You have already used this coupon\"\n        \n        return True, \"Coupon is valid\"\n\n\nclass Order(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('shipped', 'Shipped'),\n        ('delivered', 'Delivered'),\n        ('cancelled', 'Cancelled'),\n        ('refunded', 'Refunded'),\n    ]\n    \n    PAYMENT_STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('paid', 'Paid'),\n        ('failed', 'Failed'),\n        ('refunded', 'Refunded'),\n    ]\n    \n    order_number = models.CharField(max_length=100, unique=True, editable=False)\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='orders')\n    email = models.EmailField()\n    phone = models.CharField(max_length=20)\n    \n    shipping_address_line1 = models.CharField(max_length=255)\n    shipping_address_line2 = models.CharField(max_length=255, blank=True)\n    shipping_city = models.CharField(max_length=100)\n    shipping_state = models.CharField(max_length=100)\n    shipping_postal_code = models.CharField(max_length=20)\n    shipping_country = models.CharField(max_length=100)\n    \n    billing_same_as_shipping = models.BooleanField(default=True)\n    billing_address_line1 = models.CharField(max_length=255, blank=True)\n    billing_address_line2 = models.CharField(max_length=255, blank=True)\n    billing_city = models.CharField(max_length=100, blank=True)\n    billing_state = models.CharField(max_length=100, blank=True)\n    billing_postal_code = models.CharField(max_length=20, blank=True)\n    billing_country = models.CharField(max_length=100, blank=True)\n    \n    subtotal = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    shipping_cost = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)])\n    tax = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)])\n    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0, validators=[MinValueValidator(0)])\n    total = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    \n    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True)\n    \n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    payment_status = models.CharField(max_length=20, choices=PAYMENT_STATUS_CHOICES, default='pending')\n    payment_method = models.CharField(max_length=50, default='stripe')\n    payment_id = models.CharField(max_length=200, blank=True)\n    \n    notes = models.TextField(blank=True)\n    tracking_number = models.CharField(max_length=200, blank=True)\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        ordering = ['-created_at']\n        indexes = [\n            models.Index(fields=['order_number']),\n            models.Index(fields=['email']),\n            models.Index(fields=['-created_at']),\n        ]\n    \n    def save(self, *args, **kwargs):\n        if not self.order_number:\n            self.order_number = self.generate_order_number()\n        super().save(*args, **kwargs)\n    \n    def generate_order_number(self):\n        return f\"ORD-{uuid.uuid4().hex[:8].upper()}\"\n    \n    def __str__(self):\n        return f\"Order {self.order_number}\"\n\n\nclass OrderItem(models.Model):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')\n    product = models.ForeignKey('products.Product', on_delete=models.SET_NULL, null=True)\n    product_name = models.CharField(max_length=300)\n    product_sku = models.CharField(max_length=100, blank=True)\n    variant = models.ForeignKey('products.Variant', on_delete=models.SET_NULL, null=True, blank=True)\n    variant_name = models.CharField(max_length=200, blank=True)\n    quantity = models.PositiveIntegerField(default=1)\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    total_price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    \n    def save(self, *args, **kwargs):\n        if self.product:\n            self.product_name = self.product.name\n            self.product_sku = self.product.sku\n        if self.variant:\n            self.variant_name = f\"{self.variant.name}: {self.variant.value}\"\n        self.total_price = self.unit_price * self.quantity\n        super().save(*args, **kwargs)\n    \n    def __str__(self):\n        return f\"{self.quantity}x {self.product_name}\"\n","size_bytes":7302},"orders/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"products/models.py":{"content":"from django.db import models\nfrom django.utils.text import slugify\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.conf import settings\nfrom wagtail.admin.panels import FieldPanel, MultiFieldPanel, InlinePanel\nfrom wagtail.snippets.models import register_snippet\nfrom modelcluster.fields import ParentalKey\nfrom modelcluster.models import ClusterableModel\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n    slug = models.SlugField(max_length=200, unique=True)\n    description = models.TextField(blank=True)\n    image = models.ImageField(upload_to='categories/', null=True, blank=True)\n    parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.CASCADE, related_name='children')\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        verbose_name_plural = 'Categories'\n        ordering = ['name']\n    \n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n    \n    def __str__(self):\n        return self.name\n\n\nclass Brand(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n    slug = models.SlugField(max_length=200, unique=True)\n    description = models.TextField(blank=True)\n    logo = models.ImageField(upload_to='brands/', null=True, blank=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        ordering = ['name']\n    \n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n    \n    def __str__(self):\n        return self.name\n\n\nclass Product(ClusterableModel):\n    name = models.CharField(max_length=300)\n    slug = models.SlugField(max_length=300, unique=True)\n    description = models.TextField()\n    short_description = models.CharField(max_length=500, blank=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products')\n    brand = models.ForeignKey(Brand, on_delete=models.SET_NULL, null=True, blank=True, related_name='products')\n    price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    compare_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, validators=[MinValueValidator(0)], help_text=\"Original price for showing discounts\")\n    cost_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, validators=[MinValueValidator(0)])\n    stock = models.PositiveIntegerField(default=0)\n    low_stock_threshold = models.PositiveIntegerField(default=5)\n    sku = models.CharField(max_length=100, unique=True, blank=True)\n    barcode = models.CharField(max_length=100, blank=True)\n    weight = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True, help_text=\"Weight in kg\")\n    is_active = models.BooleanField(default=True)\n    is_featured = models.BooleanField(default=False)\n    is_new = models.BooleanField(default=False)\n    is_bestseller = models.BooleanField(default=False)\n    ingredients = models.TextField(blank=True)\n    seo_title = models.CharField(max_length=200, blank=True)\n    seo_description = models.CharField(max_length=300, blank=True)\n    seo_keywords = models.CharField(max_length=300, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    # Wagtail panels for admin interface\n    panels = [\n        MultiFieldPanel([\n            FieldPanel('name'),\n            FieldPanel('slug'),\n            FieldPanel('category'),\n            FieldPanel('brand'),\n        ], heading=\"Basic Information\"),\n        \n        MultiFieldPanel([\n            FieldPanel('short_description'),\n            FieldPanel('description'),\n            FieldPanel('ingredients'),\n        ], heading=\"Description\"),\n        \n        MultiFieldPanel([\n            FieldPanel('price'),\n            FieldPanel('compare_price'),\n            FieldPanel('cost_price'),\n        ], heading=\"Pricing & Discounts\"),\n        \n        MultiFieldPanel([\n            FieldPanel('stock'),\n            FieldPanel('low_stock_threshold'),\n            FieldPanel('sku'),\n            FieldPanel('barcode'),\n            FieldPanel('weight'),\n        ], heading=\"Inventory\"),\n        \n        MultiFieldPanel([\n            FieldPanel('is_active'),\n            FieldPanel('is_featured'),\n            FieldPanel('is_new'),\n            FieldPanel('is_bestseller'),\n        ], heading=\"Status Flags\"),\n        \n        InlinePanel('images', label=\"Product Images\"),\n        InlinePanel('variants', label=\"Product Variants\"),\n        \n        MultiFieldPanel([\n            FieldPanel('seo_title'),\n            FieldPanel('seo_description'),\n            FieldPanel('seo_keywords'),\n        ], heading=\"SEO Settings\"),\n    ]\n    \n    class Meta:\n        ordering = ['-created_at']\n        indexes = [\n            models.Index(fields=['slug']),\n            models.Index(fields=['is_active']),\n            models.Index(fields=['-created_at']),\n        ]\n    \n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n    \n    @property\n    def average_rating(self):\n        reviews = self.reviews.filter(is_approved=True)\n        if reviews.exists():\n            return reviews.aggregate(models.Avg('rating'))['rating__avg']\n        return 0\n    \n    @property\n    def review_count(self):\n        return self.reviews.filter(is_approved=True).count()\n    \n    @property\n    def is_in_stock(self):\n        return self.stock > 0\n    \n    @property\n    def is_low_stock(self):\n        return 0 < self.stock <= self.low_stock_threshold\n    \n    @property\n    def discount_percentage(self):\n        if self.compare_price and self.compare_price > self.price:\n            return int(((self.compare_price - self.price) / self.compare_price) * 100)\n        return 0\n    \n    def __str__(self):\n        return self.name\n\n\nclass ProductImage(models.Model):\n    product = ParentalKey(Product, on_delete=models.CASCADE, related_name='images')\n    image = models.ImageField(upload_to='products/')\n    alt_text = models.CharField(max_length=200, blank=True)\n    is_primary = models.BooleanField(default=False)\n    order = models.PositiveIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    panels = [\n        FieldPanel('image'),\n        FieldPanel('alt_text'),\n        FieldPanel('is_primary'),\n        FieldPanel('order'),\n    ]\n    \n    class Meta:\n        ordering = ['order', '-is_primary']\n    \n    def save(self, *args, **kwargs):\n        if self.is_primary:\n            ProductImage.objects.filter(product=self.product, is_primary=True).update(is_primary=False)\n        super().save(*args, **kwargs)\n    \n    def __str__(self):\n        return f\"{self.product.name} - Image {self.order}\"\n\n\nclass Variant(models.Model):\n    product = ParentalKey(Product, on_delete=models.CASCADE, related_name='variants')\n    name = models.CharField(max_length=100, help_text=\"e.g., Size, Color, Strength\")\n    value = models.CharField(max_length=100, help_text=\"e.g., Medium, Red, 20mg\")\n    price_adjustment = models.DecimalField(max_digits=10, decimal_places=2, default=0, help_text=\"Extra price for this variant\")\n    stock = models.PositiveIntegerField(default=0)\n    sku = models.CharField(max_length=100, unique=True, blank=True)\n    is_active = models.BooleanField(default=True)\n    \n    panels = [\n        FieldPanel('name'),\n        FieldPanel('value'),\n        FieldPanel('price_adjustment'),\n        FieldPanel('stock'),\n        FieldPanel('sku'),\n        FieldPanel('is_active'),\n    ]\n    \n    class Meta:\n        unique_together = ('product', 'name', 'value')\n        ordering = ['name', 'value']\n    \n    def __str__(self):\n        return f\"{self.product.name} - {self.name}: {self.value}\"\n\n\nclass Review(models.Model):\n    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='reviews')\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])\n    title = models.CharField(max_length=200)\n    comment = models.TextField()\n    is_approved = models.BooleanField(default=False)\n    is_verified_purchase = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        unique_together = ('product', 'user')\n        ordering = ['-created_at']\n        indexes = [\n            models.Index(fields=['is_approved']),\n            models.Index(fields=['-created_at']),\n        ]\n    \n    def __str__(self):\n        return f\"{self.user.username} - {self.product.name} - {self.rating} stars\"\n","size_bytes":9023},"cart/urls.py":{"content":"from django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .api_views import CartViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'cart', CartViewSet, basename='cart')\n\napp_name = 'cart'\n\nurlpatterns = [\n    path('api/', include(router.urls)),\n]\n","size_bytes":281},"products/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"cart/migrations/__init__.py":{"content":"","size_bytes":0},"core/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"blog/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"blog/migrations/0002_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('blog', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='comment',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.AddField(\n            model_name='blogpost',\n            name='author',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_posts', to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.AddIndex(\n            model_name='blogpost',\n            index=models.Index(fields=['slug'], name='blog_blogpo_slug_361555_idx'),\n        ),\n        migrations.AddIndex(\n            model_name='blogpost',\n            index=models.Index(fields=['is_published'], name='blog_blogpo_is_publ_c847aa_idx'),\n        ),\n        migrations.AddIndex(\n            model_name='blogpost',\n            index=models.Index(fields=['-published_at'], name='blog_blogpo_publish_e75c11_idx'),\n        ),\n    ]\n","size_bytes":1337},"products/__init__.py":{"content":"","size_bytes":0},"products/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass ProductsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'products'\n","size_bytes":148},"blog/__init__.py":{"content":"","size_bytes":0},"ecommerce/urls.py":{"content":"\"\"\"\nURL configuration for ecommerce project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/4.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib.sitemaps.views import sitemap\nfrom core.sitemaps import StaticViewSitemap, ProductSitemap, CategorySitemap, BlogSitemap\nfrom wagtail.admin import urls as wagtailadmin_urls\nfrom wagtail import urls as wagtail_urls\n\nsitemaps = {\n    'static': StaticViewSitemap,\n    'products': ProductSitemap,\n    'categories': CategorySitemap,\n    'blog': BlogSitemap,\n}\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('cms/', include(wagtailadmin_urls)),\n    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='sitemap'),\n    path('', include('core.urls')),\n    path('', include('products.urls')),\n    path('', include('cart.urls')),\n    path('', include('orders.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)","size_bytes":1677},"users/migrations/__init__.py":{"content":"","size_bytes":0},"cart/models.py":{"content":"from django.db import models\nfrom django.conf import settings\nfrom decimal import Decimal\n\n\nclass Cart(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True, related_name='cart')\n    session_key = models.CharField(max_length=40, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        ordering = ['-updated_at']\n    \n    @property\n    def total_items(self):\n        return sum(item.quantity for item in self.items.all())\n    \n    @property\n    def subtotal(self):\n        return sum(item.total_price for item in self.items.all())\n    \n    @property\n    def total(self):\n        return self.subtotal\n    \n    def __str__(self):\n        if self.user:\n            return f\"Cart for {self.user.username}\"\n        return f\"Anonymous Cart {self.session_key}\"\n\n\nclass CartItem(models.Model):\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items')\n    product = models.ForeignKey('products.Product', on_delete=models.CASCADE)\n    variant = models.ForeignKey('products.Variant', on_delete=models.CASCADE, null=True, blank=True)\n    quantity = models.PositiveIntegerField(default=1)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        unique_together = ('cart', 'product', 'variant')\n        ordering = ['created_at']\n    \n    @property\n    def unit_price(self):\n        price = self.product.price\n        if self.variant:\n            price += self.variant.price_adjustment\n        return price\n    \n    @property\n    def total_price(self):\n        return self.unit_price * self.quantity\n    \n    def __str__(self):\n        return f\"{self.quantity}x {self.product.name}\"\n","size_bytes":1846},"products/migrations/__init__.py":{"content":"","size_bytes":0},"orders/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"core/views.py":{"content":"from django.shortcuts import render\nfrom products.models import Product, Category\n\n\ndef home(request):\n    featured_products = Product.objects.filter(is_active=True, is_featured=True)[:8]\n    new_products = Product.objects.filter(is_active=True, is_new=True)[:8]\n    bestsellers = Product.objects.filter(is_active=True, is_bestseller=True)[:8]\n    categories = Category.objects.filter(is_active=True, parent=None)[:6]\n    \n    context = {\n        'featured_products': featured_products,\n        'new_products': new_products,\n        'bestsellers': bestsellers,\n        'categories': categories,\n    }\n    return render(request, 'core/home.html', context)\n\n\ndef about(request):\n    return render(request, 'core/about.html')\n\n\ndef contact(request):\n    return render(request, 'core/contact.html')\n\n\ndef faq(request):\n    return render(request, 'core/faq.html')\n\n\ndef terms(request):\n    return render(request, 'core/terms.html')\n\n\ndef privacy(request):\n    return render(request, 'core/privacy.html')\n","size_bytes":999},"orders/api_views.py":{"content":"from rest_framework import viewsets, status\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom django.utils import timezone\nfrom decimal import Decimal\nfrom .models import Coupon, Order, OrderItem\nfrom cart.models import Cart\nfrom .serializers import CouponSerializer, OrderSerializer, OrderCreateSerializer\n\n\nclass CouponViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = Coupon.objects.filter(is_active=True)\n    serializer_class = CouponSerializer\n    \n    @action(detail=False, methods=['post'])\n    def validate(self, request):\n        code = request.data.get('code')\n        subtotal = Decimal(request.data.get('subtotal', 0))\n        \n        try:\n            coupon = Coupon.objects.get(code=code.upper())\n        except Coupon.DoesNotExist:\n            return Response({'error': 'Invalid coupon code'}, status=status.HTTP_404_NOT_FOUND)\n        \n        is_valid, message = coupon.is_valid(request.user if request.user.is_authenticated else None, subtotal)\n        \n        if is_valid:\n            discount = coupon.calculate_discount(subtotal)\n            return Response({\n                'valid': True,\n                'discount': float(discount),\n                'coupon': CouponSerializer(coupon).data\n            })\n        else:\n            return Response({'valid': False, 'error': message}, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass OrderViewSet(viewsets.ModelViewSet):\n    serializer_class = OrderSerializer\n    permission_classes = [IsAuthenticated]\n    \n    def get_queryset(self):\n        return Order.objects.filter(user=self.request.user)\n    \n    def create(self, request):\n        serializer = OrderCreateSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        \n        # Get user's cart\n        try:\n            cart = Cart.objects.get(user=request.user)\n        except Cart.DoesNotExist:\n            return Response({'error': 'Cart is empty'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        if not cart.items.exists():\n            return Response({'error': 'Cart is empty'}, status=status.HTTP_400_BAD_REQUEST)\n        \n        # Calculate totals\n        subtotal = cart.subtotal\n        shipping_cost = Decimal('0.00')  # TODO: Calculate based on address\n        tax = Decimal('0.00')  # TODO: Calculate based on address\n        discount = Decimal('0.00')\n        \n        # Apply coupon if provided\n        coupon = None\n        coupon_code = serializer.validated_data.get('coupon_code')\n        if coupon_code:\n            try:\n                coupon = Coupon.objects.get(code=coupon_code.upper(), is_active=True)\n                is_valid, message = coupon.is_valid(request.user, subtotal)\n                if is_valid:\n                    discount = coupon.calculate_discount(subtotal)\n                    coupon.usage_count += 1\n                    coupon.save()\n            except Coupon.DoesNotExist:\n                pass\n        \n        total = subtotal + shipping_cost + tax - discount\n        \n        # Create order\n        order = Order.objects.create(\n            user=request.user,\n            email=serializer.validated_data['email'],\n            phone=serializer.validated_data['phone'],\n            shipping_address_line1=serializer.validated_data['shipping_address_line1'],\n            shipping_address_line2=serializer.validated_data.get('shipping_address_line2', ''),\n            shipping_city=serializer.validated_data['shipping_city'],\n            shipping_state=serializer.validated_data['shipping_state'],\n            shipping_postal_code=serializer.validated_data['shipping_postal_code'],\n            shipping_country=serializer.validated_data['shipping_country'],\n            billing_same_as_shipping=serializer.validated_data.get('billing_same_as_shipping', True),\n            billing_address_line1=serializer.validated_data.get('billing_address_line1', ''),\n            billing_address_line2=serializer.validated_data.get('billing_address_line2', ''),\n            billing_city=serializer.validated_data.get('billing_city', ''),\n            billing_state=serializer.validated_data.get('billing_state', ''),\n            billing_postal_code=serializer.validated_data.get('billing_postal_code', ''),\n            billing_country=serializer.validated_data.get('billing_country', ''),\n            subtotal=subtotal,\n            shipping_cost=shipping_cost,\n            tax=tax,\n            discount=discount,\n            total=total,\n            coupon=coupon\n        )\n        \n        # Create order items\n        for cart_item in cart.items.all():\n            OrderItem.objects.create(\n                order=order,\n                product=cart_item.product,\n                variant=cart_item.variant,\n                quantity=cart_item.quantity,\n                unit_price=cart_item.unit_price\n            )\n        \n        # Clear cart\n        cart.items.all().delete()\n        \n        return Response(OrderSerializer(order).data, status=status.HTTP_201_CREATED)\n","size_bytes":5062},"cart/migrations/0001_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Cart',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('session_key', models.CharField(blank=True, max_length=40, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n            options={\n                'ordering': ['-updated_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='CartItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('quantity', models.PositiveIntegerField(default=1)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='cart.cart')),\n            ],\n            options={\n                'ordering': ['created_at'],\n            },\n        ),\n    ]\n","size_bytes":1420},"products/management/commands/populate_data.py":{"content":"from django.core.management.base import BaseCommand\nfrom django.contrib.auth import get_user_model\nfrom products.models import Category, Brand, Product, ProductImage\nfrom decimal import Decimal\n\nUser = get_user_model()\n\n\nclass Command(BaseCommand):\n    help = 'Populate database with sample data'\n\n    def handle(self, *args, **options):\n        self.stdout.write('Creating sample data...')\n        \n        # Create superuser if not exists\n        if not User.objects.filter(username='admin').exists():\n            User.objects.create_superuser(\n                username='admin',\n                email='admin@example.com',\n                password='admin123',\n                age_verified=True\n            )\n            self.stdout.write(self.style.SUCCESS('✓ Created admin user (username: admin, password: admin123)'))\n        \n        # Create categories\n        categories = [\n            {'name': 'Disposable Vapes', 'description': 'Pre-filled disposable vape devices'},\n            {'name': 'Vape Devices', 'description': 'Reusable vape devices and kits'},\n            {'name': 'E-Liquids', 'description': 'Premium e-liquid flavors'},\n            {'name': 'Accessories', 'description': 'Vape accessories and parts'},\n        ]\n        \n        created_categories = []\n        for cat_data in categories:\n            cat, created = Category.objects.get_or_create(\n                name=cat_data['name'],\n                defaults={'description': cat_data['description']}\n            )\n            created_categories.append(cat)\n            if created:\n                self.stdout.write(f'✓ Created category: {cat.name}')\n        \n        # Create brands\n        brands = [\n            {'name': 'VapeMax', 'description': 'Premium vape products'},\n            {'name': 'CloudMaster', 'description': 'Quality vaping solutions'},\n            {'name': 'PureVape', 'description': 'Clean and pure vaping'},\n        ]\n        \n        created_brands = []\n        for brand_data in brands:\n            brand, created = Brand.objects.get_or_create(\n                name=brand_data['name'],\n                defaults={'description': brand_data['description']}\n            )\n            created_brands.append(brand)\n            if created:\n                self.stdout.write(f'✓ Created brand: {brand.name}')\n        \n        # Create products\n        products = [\n            {\n                'name': 'VapeMax Pro 5000 Puffs - Strawberry Ice',\n                'description': 'Premium disposable vape with refreshing strawberry ice flavor. Up to 5000 puffs.',\n                'short_description': 'Refreshing strawberry ice flavor',\n                'category': created_categories[0],\n                'brand': created_brands[0],\n                'price': Decimal('24.99'),\n                'compare_price': Decimal('29.99'),\n                'stock': 50,\n                'sku': 'VMAX-STR-5000',\n                'is_featured': True,\n                'is_new': True,\n            },\n            {\n                'name': 'CloudMaster Rechargeable Kit',\n                'description': 'Complete vape kit with rechargeable battery and refillable pod system.',\n                'short_description': 'Complete rechargeable vape kit',\n                'category': created_categories[1],\n                'brand': created_brands[1],\n                'price': Decimal('49.99'),\n                'compare_price': Decimal('59.99'),\n                'stock': 30,\n                'sku': 'CLMST-KIT-001',\n                'is_featured': True,\n                'is_bestseller': True,\n            },\n            {\n                'name': 'PureVape Mango Passion 60ml',\n                'description': 'Tropical mango passion fruit e-liquid. High quality ingredients.',\n                'short_description': 'Tropical mango passion fruit',\n                'category': created_categories[2],\n                'brand': created_brands[2],\n                'price': Decimal('19.99'),\n                'compare_price': Decimal('24.99'),\n                'stock': 100,\n                'sku': 'PUREV-MNG-60',\n                'is_new': True,\n            },\n            {\n                'name': 'VapeMax Blueberry Blast 5000',\n                'description': 'Delicious blueberry flavor in a convenient disposable format.',\n                'short_description': 'Delicious blueberry blast',\n                'category': created_categories[0],\n                'brand': created_brands[0],\n                'price': Decimal('24.99'),\n                'stock': 45,\n                'sku': 'VMAX-BLU-5000',\n                'is_bestseller': True,\n            },\n            {\n                'name': 'CloudMaster Watermelon Ice',\n                'description': 'Cool and refreshing watermelon ice flavor.',\n                'short_description': 'Cool watermelon ice',\n                'category': created_categories[0],\n                'brand': created_brands[1],\n                'price': Decimal('22.99'),\n                'stock': 60,\n                'sku': 'CLMST-WTM-001',\n                'is_featured': True,\n            },\n            {\n                'name': 'PureVape Mint Chocolate 60ml',\n                'description': 'Rich mint chocolate e-liquid flavor.',\n                'short_description': 'Rich mint chocolate',\n                'category': created_categories[2],\n                'brand': created_brands[2],\n                'price': Decimal('19.99'),\n                'stock': 75,\n                'sku': 'PUREV-MNT-60',\n            },\n            {\n                'name': 'VapeMax Grape Ice 5000',\n                'description': 'Sweet grape with a cool ice finish.',\n                'short_description': 'Sweet grape ice',\n                'category': created_categories[0],\n                'brand': created_brands[0],\n                'price': Decimal('24.99'),\n                'stock': 40,\n                'sku': 'VMAX-GRP-5000',\n            },\n            {\n                'name': 'CloudMaster Advanced Pod Kit',\n                'description': 'Advanced pod system with adjustable airflow.',\n                'short_description': 'Advanced pod system',\n                'category': created_categories[1],\n                'brand': created_brands[1],\n                'price': Decimal('69.99'),\n                'compare_price': Decimal('79.99'),\n                'stock': 20,\n                'sku': 'CLMST-ADV-KIT',\n                'is_featured': True,\n            },\n        ]\n        \n        for product_data in products:\n            product, created = Product.objects.get_or_create(\n                name=product_data['name'],\n                defaults=product_data\n            )\n            if created:\n                self.stdout.write(f'✓ Created product: {product.name}')\n        \n        self.stdout.write(self.style.SUCCESS('\\n✅ Sample data created successfully!'))\n        self.stdout.write(self.style.WARNING('\\nAdmin credentials:'))\n        self.stdout.write('  Username: admin')\n        self.stdout.write('  Password: admin123')\n","size_bytes":6995},"blog/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'\n","size_bytes":140},"users/admin.py":{"content":"from django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom .models import User, UserProfile, Wishlist\n\n\n@admin.register(User)\nclass UserAdmin(BaseUserAdmin):\n    list_display = ['username', 'email', 'first_name', 'last_name', 'is_staff', 'age_verified', 'newsletter_subscribed']\n    list_filter = ['is_staff', 'is_superuser', 'is_active', 'age_verified', 'newsletter_subscribed']\n    fieldsets = BaseUserAdmin.fieldsets + (\n        ('Additional Info', {'fields': ('phone', 'date_of_birth', 'age_verified', 'age_verified_at', 'newsletter_subscribed')}),\n    )\n\n\n@admin.register(UserProfile)\nclass UserProfileAdmin(admin.ModelAdmin):\n    list_display = ['user', 'city', 'country', 'created_at']\n    list_filter = ['country', 'created_at']\n    search_fields = ['user__username', 'user__email', 'city']\n\n\n@admin.register(Wishlist)\nclass WishlistAdmin(admin.ModelAdmin):\n    list_display = ['user', 'product', 'added_at']\n    list_filter = ['added_at']\n    search_fields = ['user__username', 'product__name']\n","size_bytes":1048},"products/migrations/0002_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('products', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='review',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.AddField(\n            model_name='productimage',\n            name='product',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product'),\n        ),\n        migrations.AddField(\n            model_name='product',\n            name='brand',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.brand'),\n        ),\n        migrations.AddField(\n            model_name='product',\n            name='category',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category'),\n        ),\n        migrations.AddField(\n            model_name='category',\n            name='parent',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category'),\n        ),\n        migrations.AlterUniqueTogether(\n            name='variant',\n            unique_together={('product', 'name', 'value')},\n        ),\n        migrations.AddIndex(\n            model_name='review',\n            index=models.Index(fields=['is_approved'], name='products_re_is_appr_141721_idx'),\n        ),\n        migrations.AddIndex(\n            model_name='review',\n            index=models.Index(fields=['-created_at'], name='products_re_created_351f12_idx'),\n        ),\n        migrations.AlterUniqueTogether(\n            name='review',\n            unique_together={('product', 'user')},\n        ),\n        migrations.AddIndex(\n            model_name='product',\n            index=models.Index(fields=['slug'], name='products_pr_slug_3edc0c_idx'),\n        ),\n        migrations.AddIndex(\n            model_name='product',\n            index=models.Index(fields=['is_active'], name='products_pr_is_acti_ca4d9a_idx'),\n        ),\n        migrations.AddIndex(\n            model_name='product',\n            index=models.Index(fields=['-created_at'], name='products_pr_created_bce1a7_idx'),\n        ),\n    ]\n","size_bytes":2661},"users/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"orders/admin.py":{"content":"from django.contrib import admin\nfrom .models import Coupon, Order, OrderItem\n\n\n@admin.register(Coupon)\nclass CouponAdmin(admin.ModelAdmin):\n    list_display = ['code', 'discount_type', 'discount_value', 'is_active', 'valid_from', 'valid_to', 'usage_count']\n    list_filter = ['discount_type', 'is_active', 'valid_from', 'valid_to']\n    search_fields = ['code', 'description']\n\n\nclass OrderItemInline(admin.TabularInline):\n    model = OrderItem\n    extra = 0\n    readonly_fields = ['product_name', 'product_sku', 'variant_name', 'unit_price', 'total_price']\n\n\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ['order_number', 'user', 'email', 'status', 'payment_status', 'total', 'created_at']\n    list_filter = ['status', 'payment_status', 'created_at']\n    search_fields = ['order_number', 'email', 'user__username']\n    readonly_fields = ['order_number', 'created_at', 'updated_at']\n    inlines = [OrderItemInline]\n    fieldsets = (\n        ('Order Info', {\n            'fields': ('order_number', 'user', 'email', 'phone', 'status', 'payment_status', 'payment_method', 'payment_id')\n        }),\n        ('Shipping Address', {\n            'fields': ('shipping_address_line1', 'shipping_address_line2', 'shipping_city', 'shipping_state', 'shipping_postal_code', 'shipping_country')\n        }),\n        ('Billing Address', {\n            'fields': ('billing_same_as_shipping', 'billing_address_line1', 'billing_address_line2', 'billing_city', 'billing_state', 'billing_postal_code', 'billing_country'),\n            'classes': ('collapse',)\n        }),\n        ('Pricing', {\n            'fields': ('subtotal', 'shipping_cost', 'tax', 'discount', 'total', 'coupon')\n        }),\n        ('Additional Info', {\n            'fields': ('notes', 'tracking_number', 'created_at', 'updated_at')\n        }),\n    )\n\n\n@admin.register(OrderItem)\nclass OrderItemAdmin(admin.ModelAdmin):\n    list_display = ['order', 'product_name', 'quantity', 'unit_price', 'total_price']\n    search_fields = ['order__order_number', 'product_name']\n","size_bytes":2046},"core/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"cart/migrations/0002_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('products', '0001_initial'),\n        ('cart', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='cartitem',\n            name='product',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product'),\n        ),\n        migrations.AddField(\n            model_name='cartitem',\n            name='variant',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='products.variant'),\n        ),\n    ]\n","size_bytes":749},"core/migrations/__init__.py":{"content":"","size_bytes":0},"core/models.py":{"content":"from django.db import models\n\n# Create your models here.\n","size_bytes":57},"blog/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"cart/__init__.py":{"content":"","size_bytes":0},"products/views.py":{"content":"from django.shortcuts import render\n\n# Create your views here.\n","size_bytes":63},"cart/context_processors.py":{"content":"def cart_context(request):\n    cart_count = 0\n    if request.user.is_authenticated:\n        from cart.models import Cart\n        try:\n            cart = Cart.objects.filter(user=request.user).first()\n            if cart:\n                cart_count = cart.total_items\n        except:\n            cart_count = 0\n    return {\n        'cart_count': cart_count\n    }\n","size_bytes":362},"products/admin.py":{"content":"from django.contrib import admin\nfrom .models import Category, Brand, Product, ProductImage, Variant, Review\n\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'parent', 'is_active', 'created_at']\n    list_filter = ['is_active', 'parent']\n    search_fields = ['name', 'description']\n    prepopulated_fields = {'slug': ('name',)}\n\n\n@admin.register(Brand)\nclass BrandAdmin(admin.ModelAdmin):\n    list_display = ['name', 'is_active', 'created_at']\n    list_filter = ['is_active']\n    search_fields = ['name']\n    prepopulated_fields = {'slug': ('name',)}\n\n\nclass ProductImageInline(admin.TabularInline):\n    model = ProductImage\n    extra = 1\n\n\nclass VariantInline(admin.TabularInline):\n    model = Variant\n    extra = 1\n\n\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = ['name', 'category', 'brand', 'price', 'stock', 'is_active', 'is_featured', 'created_at']\n    list_filter = ['is_active', 'is_featured', 'is_new', 'is_bestseller', 'category', 'brand']\n    search_fields = ['name', 'description', 'sku']\n    prepopulated_fields = {'slug': ('name',)}\n    inlines = [ProductImageInline, VariantInline]\n    fieldsets = (\n        ('Basic Info', {\n            'fields': ('name', 'slug', 'category', 'brand', 'short_description', 'description', 'ingredients')\n        }),\n        ('Pricing', {\n            'fields': ('price', 'compare_price', 'cost_price')\n        }),\n        ('Inventory', {\n            'fields': ('stock', 'low_stock_threshold', 'sku', 'barcode', 'weight')\n        }),\n        ('Status', {\n            'fields': ('is_active', 'is_featured', 'is_new', 'is_bestseller')\n        }),\n        ('SEO', {\n            'fields': ('seo_title', 'seo_description', 'seo_keywords'),\n            'classes': ('collapse',)\n        }),\n    )\n\n\n@admin.register(ProductImage)\nclass ProductImageAdmin(admin.ModelAdmin):\n    list_display = ['product', 'is_primary', 'order', 'created_at']\n    list_filter = ['is_primary']\n    search_fields = ['product__name']\n\n\n@admin.register(Variant)\nclass VariantAdmin(admin.ModelAdmin):\n    list_display = ['product', 'name', 'value', 'price_adjustment', 'stock', 'is_active']\n    list_filter = ['is_active', 'name']\n    search_fields = ['product__name', 'value']\n\n\n@admin.register(Review)\nclass ReviewAdmin(admin.ModelAdmin):\n    list_display = ['product', 'user', 'rating', 'is_approved', 'is_verified_purchase', 'created_at']\n    list_filter = ['rating', 'is_approved', 'is_verified_purchase', 'created_at']\n    search_fields = ['product__name', 'user__username', 'title', 'comment']\n    actions = ['approve_reviews']\n    \n    def approve_reviews(self, request, queryset):\n        queryset.update(is_approved=True)\n    approve_reviews.short_description = \"Approve selected reviews\"\n","size_bytes":2793},"core/sitemaps.py":{"content":"from django.contrib.sitemaps import Sitemap\nfrom django.urls import reverse\nfrom products.models import Product, Category\nfrom blog.models import BlogPost\n\n\nclass StaticViewSitemap(Sitemap):\n    priority = 0.8\n    changefreq = 'monthly'\n\n    def items(self):\n        return ['core:home', 'core:about', 'core:contact', 'core:faq']\n\n    def location(self, item):\n        return reverse(item)\n\n\nclass ProductSitemap(Sitemap):\n    changefreq = 'weekly'\n    priority = 0.9\n\n    def items(self):\n        return Product.objects.filter(is_active=True)\n\n    def lastmod(self, obj):\n        return obj.updated_at\n\n    def location(self, obj):\n        return f'/products/{obj.slug}/'\n\n\nclass CategorySitemap(Sitemap):\n    changefreq = 'weekly'\n    priority = 0.7\n\n    def items(self):\n        return Category.objects.filter(is_active=True)\n\n    def location(self, obj):\n        return f'/category/{obj.slug}/'\n\n\nclass BlogSitemap(Sitemap):\n    changefreq = 'weekly'\n    priority = 0.8\n\n    def items(self):\n        return BlogPost.objects.filter(is_published=True)\n\n    def lastmod(self, obj):\n        return obj.updated_at\n\n    def location(self, obj):\n        return f'/blog/{obj.slug}/'\n","size_bytes":1179},"orders/serializers.py":{"content":"from rest_framework import serializers\nfrom .models import Coupon, Order, OrderItem\n\n\nclass CouponSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Coupon\n        fields = ['id', 'code', 'description', 'discount_type', 'discount_value', 'min_purchase_amount', 'is_active']\n\n\nclass OrderItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OrderItem\n        fields = ['id', 'product_name', 'product_sku', 'variant_name', 'quantity', 'unit_price', 'total_price']\n\n\nclass OrderSerializer(serializers.ModelSerializer):\n    items = OrderItemSerializer(many=True, read_only=True)\n    \n    class Meta:\n        model = Order\n        fields = ['id', 'order_number', 'email', 'phone', 'shipping_address_line1', \n                  'shipping_address_line2', 'shipping_city', 'shipping_state', \n                  'shipping_postal_code', 'shipping_country', 'subtotal', 'shipping_cost',\n                  'tax', 'discount', 'total', 'status', 'payment_status', 'tracking_number',\n                  'items', 'created_at']\n        read_only_fields = ['order_number', 'subtotal', 'total', 'status', 'payment_status', 'created_at']\n\n\nclass OrderCreateSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    phone = serializers.CharField(max_length=20)\n    shipping_address_line1 = serializers.CharField(max_length=255)\n    shipping_address_line2 = serializers.CharField(max_length=255, required=False, allow_blank=True)\n    shipping_city = serializers.CharField(max_length=100)\n    shipping_state = serializers.CharField(max_length=100)\n    shipping_postal_code = serializers.CharField(max_length=20)\n    shipping_country = serializers.CharField(max_length=100)\n    billing_same_as_shipping = serializers.BooleanField(default=True)\n    billing_address_line1 = serializers.CharField(max_length=255, required=False, allow_blank=True)\n    billing_address_line2 = serializers.CharField(max_length=255, required=False, allow_blank=True)\n    billing_city = serializers.CharField(max_length=100, required=False, allow_blank=True)\n    billing_state = serializers.CharField(max_length=100, required=False, allow_blank=True)\n    billing_postal_code = serializers.CharField(max_length=20, required=False, allow_blank=True)\n    billing_country = serializers.CharField(max_length=100, required=False, allow_blank=True)\n    coupon_code = serializers.CharField(required=False, allow_blank=True)\n","size_bytes":2430},"blog/migrations/0001_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='BlogPost',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=300)),\n                ('slug', models.SlugField(max_length=300, unique=True)),\n                ('excerpt', models.CharField(blank=True, max_length=500)),\n                ('content', models.TextField()),\n                ('featured_image', models.ImageField(blank=True, null=True, upload_to='blog/')),\n                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=300)),\n                ('is_published', models.BooleanField(default=False)),\n                ('is_featured', models.BooleanField(default=False)),\n                ('views_count', models.PositiveIntegerField(default=0)),\n                ('seo_title', models.CharField(blank=True, max_length=200)),\n                ('seo_description', models.CharField(blank=True, max_length=300)),\n                ('published_at', models.DateTimeField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n            options={\n                'ordering': ['-published_at', '-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Comment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('content', models.TextField()),\n                ('is_approved', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('blog_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blog.blogpost')),\n                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='blog.comment')),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n    ]\n","size_bytes":2482},"ecommerce/asgi.py":{"content":"\"\"\"\nASGI config for ecommerce project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n\napplication = get_asgi_application()\n","size_bytes":395},"core/__init__.py":{"content":"","size_bytes":0},"blog/models.py":{"content":"from django.db import models\nfrom django.conf import settings\nfrom django.utils.text import slugify\n\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=300)\n    slug = models.SlugField(max_length=300, unique=True)\n    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='blog_posts')\n    excerpt = models.CharField(max_length=500, blank=True)\n    content = models.TextField()\n    featured_image = models.ImageField(upload_to='blog/', null=True, blank=True)\n    tags = models.CharField(max_length=300, blank=True, help_text=\"Comma-separated tags\")\n    is_published = models.BooleanField(default=False)\n    is_featured = models.BooleanField(default=False)\n    views_count = models.PositiveIntegerField(default=0)\n    seo_title = models.CharField(max_length=200, blank=True)\n    seo_description = models.CharField(max_length=300, blank=True)\n    published_at = models.DateTimeField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        ordering = ['-published_at', '-created_at']\n        indexes = [\n            models.Index(fields=['slug']),\n            models.Index(fields=['is_published']),\n            models.Index(fields=['-published_at']),\n        ]\n    \n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.title)\n        if self.is_published and not self.published_at:\n            from django.utils import timezone\n            self.published_at = timezone.now()\n        super().save(*args, **kwargs)\n    \n    def get_tags_list(self):\n        if self.tags:\n            return [tag.strip() for tag in self.tags.split(',')]\n        return []\n    \n    def __str__(self):\n        return self.title\n\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.CASCADE, related_name='replies')\n    content = models.TextField()\n    is_approved = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return f\"{self.user.username} on {self.blog_post.title}\"\n","size_bytes":2489},"orders/migrations/0001_initial.py":{"content":"# Generated by Django 4.2.7 on 2025-10-30 09:02\n\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Coupon',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('code', models.CharField(max_length=50, unique=True)),\n                ('description', models.TextField(blank=True)),\n                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount')], max_length=20)),\n                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('min_purchase_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('max_discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),\n                ('usage_limit', models.PositiveIntegerField(blank=True, help_text='Total number of times this coupon can be used', null=True)),\n                ('usage_count', models.PositiveIntegerField(default=0)),\n                ('user_usage_limit', models.PositiveIntegerField(default=1, help_text='Number of times a single user can use this coupon')),\n                ('is_active', models.BooleanField(default=True)),\n                ('valid_from', models.DateTimeField()),\n                ('valid_to', models.DateTimeField()),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Order',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('order_number', models.CharField(editable=False, max_length=100, unique=True)),\n                ('email', models.EmailField(max_length=254)),\n                ('phone', models.CharField(max_length=20)),\n                ('shipping_address_line1', models.CharField(max_length=255)),\n                ('shipping_address_line2', models.CharField(blank=True, max_length=255)),\n                ('shipping_city', models.CharField(max_length=100)),\n                ('shipping_state', models.CharField(max_length=100)),\n                ('shipping_postal_code', models.CharField(max_length=20)),\n                ('shipping_country', models.CharField(max_length=100)),\n                ('billing_same_as_shipping', models.BooleanField(default=True)),\n                ('billing_address_line1', models.CharField(blank=True, max_length=255)),\n                ('billing_address_line2', models.CharField(blank=True, max_length=255)),\n                ('billing_city', models.CharField(blank=True, max_length=100)),\n                ('billing_state', models.CharField(blank=True, max_length=100)),\n                ('billing_postal_code', models.CharField(blank=True, max_length=20)),\n                ('billing_country', models.CharField(blank=True, max_length=100)),\n                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('shipping_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('tax', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('total', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),\n                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),\n                ('payment_method', models.CharField(default='stripe', max_length=50)),\n                ('payment_id', models.CharField(blank=True, max_length=200)),\n                ('notes', models.TextField(blank=True)),\n                ('tracking_number', models.CharField(blank=True, max_length=200)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='OrderItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('product_name', models.CharField(max_length=300)),\n                ('product_sku', models.CharField(blank=True, max_length=100)),\n                ('variant_name', models.CharField(blank=True, max_length=200)),\n                ('quantity', models.PositiveIntegerField(default=1)),\n                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),\n                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.order')),\n            ],\n        ),\n    ]\n","size_bytes":6076},"replit.md":{"content":"# E-Commerce Platform - Replit Configuration\n\n## Overview\nA modern, feature-rich Django e-commerce platform with a beautiful UI. Built with Django 4.2, SQLite, Django REST Framework, and TailwindCSS.\n\n**Current State**: Fully configured and running in Replit environment with sample data loaded.\n\n## Recent Changes (October 31, 2025)\n- ✅ Installed Python 3.11 and all dependencies\n- ✅ Fixed Wagtail compatibility issues (removed deprecated `wagtail.contrib.modeladmin`)\n- ✅ Created static and media directories\n- ✅ Ran database migrations successfully\n- ✅ Populated sample data (admin user + products)\n- ✅ Configured workflow to run Django server on port 5000\n- ✅ Configured deployment settings for Replit autoscale\n\n## Project Architecture\n\n### Technology Stack\n- **Backend**: Django 4.2.7\n- **Database**: SQLite (development)\n- **API**: Django REST Framework 3.14.0\n- **CMS**: Wagtail 6.0.6\n- **Frontend**: TailwindCSS 3.x (via CDN), Alpine.js\n- **Authentication**: JWT tokens via djangorestframework-simplejwt\n- **Static Files**: WhiteNoise for serving static files\n\n### Project Structure\n```\necommerce/\n├── products/          # Product catalog, categories, brands, reviews\n├── cart/              # Shopping cart functionality\n├── orders/            # Order management and coupons\n├── users/             # User authentication and profiles\n├── blog/              # Blog and articles\n├── core/              # Homepage and static pages\n├── templates/         # Django templates\n├── static/            # Static files (CSS, JS, images)\n├── media/             # User-uploaded files\n└── ecommerce/         # Project settings\n```\n\n### Database Models\n- **Products**: Category, Brand, Product, ProductImage, Variant, Review\n- **Cart**: Cart, CartItem\n- **Orders**: Order, OrderItem, Coupon\n- **Users**: Custom User model, UserProfile, Wishlist\n- **Blog**: BlogPost, Comment\n\n## Known Issues & Notes\n\n### TailwindCSS CDN Warning\nThe application currently uses TailwindCSS via CDN (line 15 in templates/base.html). This is acceptable for development but should not be used in production. The browser console shows a warning about this.\n\n**Recommendation**: For production, install TailwindCSS as a PostCSS plugin or use the Tailwind CLI.\n\n### Database\nCurrently using SQLite for simplicity. PostgreSQL is available but not configured due to permissions.\n\n## Configuration\n\n### Environment Variables\n- `SECRET_KEY`: Django secret key (has default for development)\n- `DEBUG`: Debug mode (default: True)\n- `ALLOWED_HOSTS`: Currently set to ['*']\n\n### Admin Access\n- **URL**: `/admin/`\n- **Username**: admin\n- **Password**: admin123\n\n### Wagtail CMS\n- **URL**: `/cms/`\n- **Same credentials as Django admin**\n\n## Deployment Configuration\n- **Type**: Autoscale (stateless)\n- **Command**: `python manage.py runserver 0.0.0.0:5000`\n- **Port**: 5000 (configured for Replit webview)\n\n## User Preferences\nNone recorded yet.\n\n## Development Notes\n- The workflow automatically runs the Django development server on port 5000\n- Static files are served via WhiteNoise\n- CORS is enabled for all origins (development setting)\n- CSRF trusted origins include `*.replit.dev` and `*.repl.co`\n- Age verification modal is enabled (18+ check)\n","size_bytes":3285}},"version":2}